{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tipos de datos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#En una variable se almacena cualquier de estos tipos de datos en python. se inicializa dandole cualquier nombre empezando co\n",
    "#Se inicializa dandole cualquier nombre empezando con una letra. \n",
    "#Python expresa los nombres de las variables en NEGRO.\n",
    "\n",
    "\n",
    "\n",
    "variable1 = \"string\"\n",
    "variable2 = 1\n",
    "variable3 = 1.0\n",
    "variable4 = True\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## String: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'str'>\n"
     ]
    }
   ],
   "source": [
    "#Son los datos que contienen una secuencia de caracteres.\n",
    "#Se expresan dentro de dos comillas dobles: \"\", o dentro de dos comillas simples: ''.\n",
    "#Python expresa los datos que son string con el color ROJO.\n",
    "\n",
    "#Entre los strings se pueden guardar los siguintes datos:\n",
    "palabras = \"Palabra\"\n",
    "frases = \"Esto es una frase.\"\n",
    "letras = \"A\"\n",
    "numerosEnteros = \"10\"\n",
    "numerosDecimales = \"10.1\"\n",
    "signos = \"!@#$%^&\"\n",
    "espacios = \" \"\n",
    "\n",
    "\n",
    "\n",
    "#Dentro de un string no pueden haber comillas de ningun tipo, por ejemplo:\n",
    "    #\"Hola \"  como estas\"\n",
    "    #'Estoy ' bien'\n",
    "\n",
    "print(type(palabras))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Int:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "#Son los datos que contienen numeros enteros. \n",
    "#Python expresa los int con el color VERDE. \n",
    "\n",
    "numero = 234567\n",
    "\n",
    "print(type(numero))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Float:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'float'>\n"
     ]
    }
   ],
   "source": [
    "#Son los datos que contienen numeros decimales.\n",
    "#Python expresa los int con el color VERDE. \n",
    "\n",
    "numero = 1234.67890\n",
    "\n",
    "print(type(numero))\n",
    "\n",
    "#Si se divide dos enteros el resultado sera guardado como un float.\n",
    "division = 2/1 \n",
    "#2.0\n",
    "\n",
    "#Para hacer que el resultado sea int se usa doble forwardslash:\n",
    "resultado = 2//1 \n",
    "#2\n",
    "\n",
    "#Si se divide, multiplica, suma o resta con un float, el resultado sera un float. \n",
    "multiplicacion = 1.5*2 \n",
    "#3.0\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Boolean:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'bool'> <class 'bool'>\n"
     ]
    }
   ],
   "source": [
    "#Son los datos que guardan dos valores; se usa para saber si el resultado de una expresion es verdadero o falso.\n",
    "#Si el resultado de la expresion es verdadero python lo expresa como un True,s i es falsa lo expres como False.\n",
    "#Python expresa los boolean en NEGRILLA con el color VERDE. \n",
    "\n",
    "verdadero = True\n",
    "#0 is 0 (si 0 es 0) \n",
    "\n",
    "falso = False\n",
    "#0 is 1 (si 0 es 1)\n",
    "\n",
    "\n",
    "print(type(verdadero), type(falso))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
